{
	"nodes": {
		"EMPTY": {
			"type": "statement",
			"inputs": [],
			"outputs": [],
			"template": null
		},
		"CONSTANTS": {
			"type": "constants",
			"inputs": [],
			"outputs": [
				"float:PI:3.14"
			],
			"template": null
		},
		"FRAGMENT_INPUT": {
			"type": "start",
			"inputs": [],
			"outputs": [
				"vec4:gl_FragCoord",
				"ivec2:windowSize",
				"float:time",
				"float:speed"
			],
			"template": null
		},
		"FRAGMENT_OUTPUT": {
			"type": "end",
			"inputs": [
				"vec4:gl_FragColor"
			],
			"outputs": [],
			"template": null
		},
		"FRAGMENT_TEST": {
			"type": "statement",
			"inputs": [
				"vec4:coord",
				"ivec2:size",
				"float:t"
			],
			"outputs": [
				"vec4:color"
			],
			"template": "t *= speed;\nvec2 uv = vec2(coord.yx) / vec2(size);\nuv.xy = vec2(uv.x * cos(t), sin(uv.y) / 2.0 + 0.5);\nvec4 color = vec4(uv, cos(t) / 2.0 + 0.5, 1.0);\n"
		},
		"COMPUTE_INPUT": {
			"type": "start",
			"inputs": [],
			"outputs": [
				"vec4:gl_FragCoord",
				"ivec2:windowSize",
				"float:time",
				"float:speed"
			],
			"template": null
		},
		"COMPUTE_OUTPUT": {
			"type": "end",
			"inputs": [
				"vec4:gl_FragColor"
			],
			"outputs": [],
			"template": null
		},
		"COMPUTE_TEST": {
			"type": "statement",
			"inputs": [
				"vec4:coord",
				"ivec2:size",
				"float:t"
			],
			"outputs": [
				"vec4:color"
			],
			"template": "vec2 uv = vec2(gl_GlobalInvocationID.xy) / imageSize(image);\nimageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(uv, 0.0, 1.0));"
		},
		"ANTS_INPUT": {
			"type": "start",
			"inputs": [],
			"outputs": [
				"int:operation",
				"float:aspect",
				"float:delta",
				"int:count",
				"float:moveSpeed",
				"float:sensorLength",
				"int:sensorSize",
				"float:turnSpeed",
				"float:sensorAngle",
				"int:stepsPerFrame"
			],
			"template": null
		},
		"ANTS_OUTPUT": {
			"type": "end",
			"inputs": [],
			"outputs": [],
			"template": null
		},
		"ANTS_COMPUTE": {
			"type": "statement",
			"inputs": [],
			"outputs": [],
			"template": ""
		},
		"BLUR_INPUT": {
			"type": "start",
			"inputs": [],
			"outputs": [
				"float:delta",
				"int:kernelSize",
				"float:fadeRate",
				"float:diffuseRate"
			],
			"template": null
		},
		"BLUR_OUTPUT": {
			"type": "end",
			"inputs": [],
			"outputs": [],
			"template": null
		},
		"BLUR": {
			"type": "statement",
			"inputs": [],
			"outputs": [],
			"template": "void main(void){ivec2 size = ivec2(imageSize(image));ivec2 coord = ivec2(gl_GlobalInvocationID.xy);vec4 color = vec4(0.0);int count = 0;for (int i = -kernelSize; i <= kernelSize; i++){for (int j = -kernelSize; j <= kernelSize; j++){ivec2 xy = coord + ivec2(i, j);xy = min(size - 1, max(xy, 0));color += imageLoad(image, xy);}}vec4 blurredColor = color / (2 * kernelSize * 2 * kernelSize);float diffuse = clamp(diffuseRate * delta, 0, 1);blurredColor = imageLoad(image, coord) * (1 - diffuse) + blurredColor * diffuseRate;imageStore(image, coord, vec4(max(blurredColor.xyz - fadeRate  * delta, 0), 1.0));"
		}
	},
	"functions": {
		"random": {
			"type": "function",
			"inputs": [
				"float:f"
			],
			"outputs": [
				"float"
			],
			"template": "return fract(sin(f) * 43758.5453123);"
		},
		"random2": {
			"type": "function",
			"inputs": [
				"vec2:st"
			],
			"outputs": [
				"float"
			],
			"template": "return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);"
		}
	}
}